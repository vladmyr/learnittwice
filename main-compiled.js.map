{"version":3,"sources":["main.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,IAAI,CAAC,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AAC9B,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/B,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC3B,IAAI,OAAO,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AAClC,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC3B,IAAI,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;;;;;;AAMzD,MAAM,CAAC,GAAG,CAAC,IAAI,GAAG,SAAS,CAAC;AAC5B,IAAI,GAAG,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC;;AAE1B,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,YAAU;;AAE/B,OAAK,CAAC,eAAe,GAAG,QAAQ,CAAC;;;AAGjC,SAAO,GAAG,CAAC,UAAU,EAAE,CAAC;CACzB,CAAC,CAAC,IAAI,CAAC,YAAU;;AAEhB,SAAO,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,UAAS,UAAU,EAAE;AACxD,WAAO,IAAI,OAAO,CAAC,UAAU,OAAO,EAAE,MAAM,EAAE;;AAE5C,aAAO,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,UAAU,GAAG,EAAE;AACjF,YAAI,GAAG,EAAE;AACP,iBAAO,MAAM,CAAC,GAAG,CAAC,CAAC;SACpB,MAAM;AACL,iBAAO,CAAC,GAAG,CAAC,aAAa,GAAG,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,WAAW,EAAE,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;AAC3F,iBAAO,OAAO,EAAE,CAAC;SAClB;OACF,CAAC,CAAC;KACJ,CAAC,CAAC;GACJ,EAAE,EAAE,WAAW,EAAE,CAAC,EAAE,CAAC,CAAC;CACxB,CAAC,CAAA","file":"main-compiled.js","sourcesContent":["\"use strict\";\r\n\r\nvar _ = require(\"underscore\");\r\nvar config = require(\"config\");\r\nvar http = require(\"http\");\r\nvar Promise = require(\"bluebird\");\r\nvar path = require(\"path\");\r\nvar App = require(path.join(__dirname, config.file.app));\r\n\r\n/**\r\n * Main initialization\r\n * TODO - finish refactoring\r\n */\r\nconfig.dir.root = __dirname;\r\nvar app = new App(config);\r\n\r\nPromise.resolve().then(function(){\r\n  // tmp\r\n  Error.stackTraceLimit = Infinity;\r\n\r\n  // initalize application\r\n  return app.initialize();\r\n}).then(function(){\r\n  // setup web servers for each entry point\r\n  return Promise.each(app.expressApps, function(expressApp) {\r\n    return new Promise(function (fulfill, reject) {\r\n      // TODO - implement https protocol for different environments\r\n      return http.createServer(expressApp).listen(expressApp.get(\"port\"), function (err) {\r\n        if (err) {\r\n          return reject(err);\r\n        } else {\r\n          console.log(\"Listening '\" + expressApp.get(\"alias\") + \"' on port\", expressApp.get(\"port\"));\r\n          return fulfill();\r\n        }\r\n      });\r\n    });\r\n  }, { concurrency: 1 });\r\n})\r\n//  .catch(function(err){\r\n//  // error handling\r\n//  // TODO - implement decent error handling with logging\r\n//  console.log(err, err.stack\r\n//    ? JSON.parse(err.stack)\r\n//    : \"\");\r\n//  return process.exit(0);\r\n//});\r\n\r\n\r\n//}), {}, function(err, app){\r\n//  if(err){\r\n//    console.error(err, querystring.unescape(err.stack));\r\n//    return process.exit(0);\r\n//  }else{\r\n//    // process each entry point\r\n//    return Promise.each((app.expressApps || []), function(total, expressApp){\r\n//      //run api\r\n//      return new Promise(function(fulfill, reject){\r\n//        return http.createServer(expressApp).listen(expressApp.get(\"port\"), function(err){\r\n//          if(err){\r\n//            return reject(err);\r\n//          }else{\r\n//            console.log(\"Listening '\" + expressApp.get(\"alias\") + \"' on port\", expressApp.get(\"port\"));\r\n//            return fulfill();\r\n//          }\r\n//        });\r\n//      });\r\n//    }, { concurrency: 1 });\r\n//  }\r\n//});"]}