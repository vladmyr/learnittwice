{"version":3,"sources":["DatabaseMongo.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;AAEb,IAAM,GAAG,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;AAC3B,IAAM,OAAO,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AACpC,IAAM,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;;;;;;;;;;;;IAW/B,aAAa;AACN,WADP,aAAa,CACL,GAAG,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE;0BADlD,aAAa;;AAEf,QAAM,IAAI,GAAG,IAAI,CAAC;;AAElB,QAAI,CAAC,GAAG,GAAG,GAAG,CAAC;AACf,QAAI,CAAC,QAAQ,GAAG,QAAQ,GACpB,QAAQ,GACR,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC;AAC7B,QAAI,CAAC,QAAQ,GAAG,QAAQ,GACpB,QAAQ,GACR,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;AACpF,QAAI,CAAC,KAAK,GAAG,KAAK,GACd,KAAK,GACL,IAAI,CAAC;AACT,QAAI,CAAC,QAAQ,GAAG,QAAQ,GACpB,QAAQ,GACR,QAAQ,CAAC;AACb,QAAI,CAAC,aAAa,GAAG,KAAK,CAAC;AAC3B,QAAI,CAAC,MAAM,GAAG,IAAI,CAAC;AACnB,QAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;;;;;;;;;;;;;GAa5B;;;;;;;eAhCG,aAAa;;WAqCP,sBAAG;AACX,UAAM,IAAI,GAAG,IAAI,CAAC;;AAElB,aAAO,IAAI,OAAO,CAAC,UAAS,OAAO,EAAE,MAAM,EAAC;;AAE1C,YAAG,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,WAAW,EAAC;AAC7C,iBAAO,MAAM,CAAC,IAAI,KAAK,CAAC,wCAAwC,GAAG,IAAI,CAAC,KAAK,GAAG,uBAAuB,CAAC,CAAC,CAAC;SAC3G;;;AAGD,YAAG,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,WAAW,EAAC;AAChD,iBAAO,MAAM,CAAC,IAAI,KAAK,CAAC,2CAA2C,GAAG,IAAI,CAAC,QAAQ,GAAG,uBAAuB,CAAC,CAAC,CAAC;SACjH;;AAED,YAAG,OAAO,IAAI,CAAC,GAAG,CAAC,QAAQ,KAAK,WAAW,EAAC;AAC1C,cAAI,CAAC,GAAG,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC9B;;;AAGD,YAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;;AAElG,YAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;;AAE7B,YAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC;;AAEpD,YAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;AACzC,YAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;OAC5C,CAAC,CAAC;KACJ;;;SAjEG,aAAa;;;AAoEnB,MAAM,CAAC,OAAO,GAAG,aAAa,CAAC","file":"DatabaseMongo-compiled.js","sourcesContent":["\"use strict\";\r\n\r\nconst url = require(\"url\");\r\nconst Promise = require(\"bluebird\");\r\nconst mongoose = require(\"mongoose\");\r\n\r\n/**\r\n * Mongodb database connector constructor\r\n * @param app\r\n * @param dbConfig\r\n * @param modelDir\r\n * @param refDb\r\n * @param refModel\r\n * @constructor\r\n */\r\nclass DatabaseMongo {\r\n  constructor(app, dbConfig, modelDir, refDb, refModel) {\r\n    const self = this;\r\n\r\n    self.app = app;\r\n    self.dbConfig = dbConfig\r\n      ? dbConfig\r\n      : self.app.config.database;\r\n    self.modelDir = modelDir\r\n      ? modelDir\r\n      : self.modelDir = path.join(self.app.config.dir.root, self.app.config.dir.models);\r\n    self.refDb = refDb\r\n      ? refDb\r\n      : \"db\";\r\n    self.refModel = refModel\r\n      ? refModel\r\n      : \"models\";\r\n    self.isInitialized = false;\r\n    self.logger = null;\r\n    self.loggerTransports = [];\r\n\r\n    // initialize logging\r\n    // TODO - fix\r\n    //!self.app.config.db.isEnabledFileLogging && (self.loggerTransports.push(\r\n    //  new (winston.transports.File)({\r\n    //    filename: path.join(self.app.config.dir.root, self.app.config.file.log.db),\r\n    //    json: false\r\n    //  })\r\n    //));\r\n    //!self.app.config.db.isEnabledConsoleLogging && (self.loggerTransports.push(\r\n    //  new (winston.transports.Console)()\r\n    //));\r\n  }\r\n  /**\r\n   * Initialize ODM\r\n   * @returns {Promise}\r\n   */\r\n  initialize() {\r\n    const self = this;\r\n\r\n    return new Promise(function(fulfill, reject){\r\n      // check whether database reference is occupied\r\n      if(typeof self.app[self.refDb] !== \"undefined\"){\r\n        return reject(new Error(\"Database initialisation with refDb = '\" + self.refDb + \"' is already reserved\"));\r\n      }\r\n\r\n      // check whether database models' reference is occupied\r\n      if(typeof self.app[self.refModel] !== \"undefined\"){\r\n        return reject(new Error(\"Database initialisation with refModel = '\" + self.refModel + \"' is already reserved\"));\r\n      }\r\n\r\n      if(typeof self.app.mongoose === \"undefined\"){\r\n        self.app.mongoose = mongoose;\r\n      }\r\n\r\n      // open connection\r\n      self.app.mongoose.connect(self.dbConfig.database_mongo.uri, self.dbConfig.database_mongo.options);\r\n\r\n      self.app[self.refModel] = {};\r\n      // map connection reference\r\n      self.app[self.refDb] = self.app.mongoose.connection;\r\n\r\n      self.app[self.refDb].on(\"error\", reject);\r\n      self.app[self.refDb].once(\"open\", fulfill);\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = DatabaseMongo;"]}